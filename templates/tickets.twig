{% extends "base.twig" %}

{% block content %}
<div class="flex flex-col min-h-screen bg-gray-50">

  {% include "partials/dashboard_nav.twig" %}

  <main class="flex-1 max-w-[1440px] mx-auto w-full px-6 py-10">
    <!-- Back to Dashboard Button -->
    <div class="mb-6">
      <a
        href="/?page=dashboard"
        class="bg-blue-600 text-white px-4 py-2 rounded-xl shadow hover:bg-blue-700 transition"
      >
        ← Back to Dashboard
      </a>
    </div>

    <h2 class="text-3xl font-bold text-gray-800 mb-6">Ticket Management</h2>

    <!-- Form -->
    <form id="ticketForm" class="bg-white p-6 rounded-2xl shadow mb-10 space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Title *</label>
        <input
          type="text"
          id="title"
          class="w-full border rounded-xl px-3 py-2 focus:ring-2 focus:ring-blue-500"
        />
        <p id="titleError" class="text-red-500 text-sm mt-1 hidden"></p>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
        <textarea
          id="description"
          class="w-full border rounded-xl px-3 py-2 focus:ring-2 focus:ring-blue-500"
          rows="3"
        ></textarea>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Status *</label>
        <select
          id="status"
          class="w-full border rounded-xl px-4 py-2 focus:ring-2 focus:ring-blue-500"
        >
          <option value="open">Open</option>
          <option value="in_progress">In Progress</option>
          <option value="closed">Closed</option>
        </select>
        <p id="statusError" class="text-red-500 text-sm mt-1 hidden"></p>
      </div>

      <div class="flex space-x-4">
        <button
          type="submit"
          class="bg-blue-600 text-white px-6 py-2 rounded-xl hover:bg-blue-700 transition"
        >
          Create Ticket
        </button>
        <button
          type="button"
          id="cancelEdit"
          class="bg-gray-300 text-gray-800 px-6 py-2 rounded-xl hover:bg-gray-400 transition hidden"
        >
          Cancel
        </button>
      </div>
    </form>

    <!-- Ticket List -->
    <div id="ticketList" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3"></div>
  </main>

  {% include "partials/footer.twig" %}
</div>

<script type="module">
  import { showToast } from "/js/toast.js";

  const ticketForm = document.getElementById("ticketForm");
  const ticketList = document.getElementById("ticketList");
  const cancelEditBtn = document.getElementById("cancelEdit");

  const titleInput = document.getElementById("title");
  const descInput = document.getElementById("description");
  const statusInput = document.getElementById("status");
  const titleError = document.getElementById("titleError");
  const statusError = document.getElementById("statusError");

  let editId = null;
  const currentUser = JSON.parse(localStorage.getItem("current_user"));

  // Redirect if not logged in
  if (!currentUser) {
    window.location.href = "/?page=login";
  }

  // ✅ Get all tickets belonging to the current user
  function getTickets() {
    const allTickets = JSON.parse(localStorage.getItem("tickets")) || [];
    return allTickets.filter(t => t.owner === currentUser.email);
  }

  // ✅ Save tickets safely (preserves others' data)
  function saveTickets(userTickets) {
    const allTickets = JSON.parse(localStorage.getItem("tickets")) || [];
    const merged = [
      ...allTickets.filter(t => t.owner !== currentUser.email),
      ...userTickets
    ];
    localStorage.setItem("tickets", JSON.stringify(merged));
  }

  // ✅ Render tickets
  function renderTickets() {
    const tickets = getTickets();
    ticketList.innerHTML = "";

    if (tickets.length === 0) {
      ticketList.innerHTML = '<p class="text-gray-600">No tickets yet. Create one above!</p>';
      return;
    }

    tickets.forEach(ticket => {
      const statusClasses = {
        open: "bg-green-100 text-green-800",
        in_progress: "bg-amber-100 text-amber-800",
        closed: "bg-gray-200 text-gray-700",
      }[ticket.status] || "bg-gray-100";

      const card = document.createElement("div");
      card.className = "bg-white p-6 rounded-2xl shadow relative hover:shadow-lg transition";

      card.innerHTML = `
        <span class="absolute top-3 right-3 text-xs font-medium px-3 py-1 rounded-full ${statusClasses}">
          ${ticket.status.replace("_", " ")}
        </span>
        <h3 class="text-lg font-semibold text-gray-800">${ticket.title}</h3>
        ${ticket.description ? `<p class="text-gray-600 mt-2 text-sm">${ticket.description}</p>` : ""}
        <div class="flex space-x-3 mt-4">
          <button class="text-blue-600 hover:underline edit-btn" data-id="${ticket.id}">Edit</button>
          <button class="text-red-600 hover:underline delete-btn" data-id="${ticket.id}">Delete</button>
        </div>
      `;

      ticketList.appendChild(card);
    });

    document.querySelectorAll(".edit-btn").forEach(btn =>
      btn.addEventListener("click", e => editTicket(e.target.dataset.id))
    );

    document.querySelectorAll(".delete-btn").forEach(btn =>
      btn.addEventListener("click", e => deleteTicket(e.target.dataset.id))
    );
  }

  // ✅ Edit ticket
  function editTicket(id) {
    const tickets = getTickets();
    const ticket = tickets.find(t => t.id === id);
    if (!ticket) return;

    editId = id;
    titleInput.value = ticket.title;
    descInput.value = ticket.description;
    statusInput.value = ticket.status;

    ticketForm.querySelector("button[type='submit']").textContent = "Update Ticket";
    cancelEditBtn.classList.remove("hidden");
  }

  // ✅ Delete ticket
  function deleteTicket(id) {
    if (confirm("Are you sure you want to delete this ticket?")) {
      const tickets = getTickets().filter(t => t.id !== id);
      saveTickets(tickets);
      renderTickets();
      showToast("Ticket deleted successfully!", "error");
    }
  }

  // ✅ Reset form fields
  function resetForm() {
    titleInput.value = "";
    descInput.value = "";
    statusInput.value = "open";
    titleError.classList.add("hidden");
    statusError.classList.add("hidden");
    editId = null;
    ticketForm.querySelector("button[type='submit']").textContent = "Create Ticket";
    cancelEditBtn.classList.add("hidden");
  }

  cancelEditBtn.addEventListener("click", resetForm);

  // ✅ Form submit handler
  ticketForm.addEventListener("submit", e => {
    e.preventDefault();

    const title = titleInput.value.trim();
    const description = descInput.value.trim();
    const status = statusInput.value;

    let valid = true;
    if (!title) {
      titleError.textContent = "Title is required.";
      titleError.classList.remove("hidden");
      valid = false;
    } else titleError.classList.add("hidden");

    if (!["open", "in_progress", "closed"].includes(status)) {
      statusError.textContent = "Status must be open, in_progress, or closed.";
      statusError.classList.remove("hidden");
      valid = false;
    } else statusError.classList.add("hidden");

    if (!valid) return;

    const currentUser = JSON.parse(localStorage.getItem("current_user"));
    if (!currentUser || !currentUser.email) {
      showToast("Please log in again.", "error");
      window.location.href = "/?page=login";
      return;
    }

    let tickets = getTickets();

    if (editId) {
      const idx = tickets.findIndex(t => t.id === editId);
      tickets[idx] = { ...tickets[idx], title, description, status };
      showToast("Ticket updated successfully!", "info");
    } else {
      const newTicket = {
        id: crypto.randomUUID(),
        title,
        description,
        status,
        owner: currentUser.email
      };
      tickets.push(newTicket);
      showToast("Ticket created successfully!", "success");
    }

    saveTickets(tickets);
    resetForm();
    renderTickets();
  });

  document.addEventListener("DOMContentLoaded", renderTickets);
</script>
{% endblock %}
